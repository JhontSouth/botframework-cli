steps:
- bash: |
    short_hash=`git rev-parse --short=7 HEAD`  ## At least 7 digits, more if needed for uniqueness
    echo "Full git hash:  $(Build.SourceVersion)"
    echo "Short git hash: $short_hash"
    echo "##vso[task.setvariable variable=short_hash]$short_hash"  ## Store variable for subsequent steps
  workingDirectory: $(Build.SourcesDirectory)
  displayName: Get commit number

- powershell: |
    $date = (Get-Date).ToString("yyyyMMdd")
    echo "##vso[task.setvariable variable=buildDate]$date"  ## Store variable for subsequent steps
  displayName: Get formatted date

- bash: |
    version=`echo "$(version)"`
    _version=`echo "$(_version)"`
    echo "version:  $version"
    echo "_version:  $_version"
    [  -z "$version" ] && buildVersion=$_version.$(buildDate).$(short_hash) || buildVersion=$version
    echo "buildVersion:  $buildVersion"
    echo "##vso[task.setvariable variable=buildVersion]$buildVersion"  ## Store variable for subsequent steps
  workingDirectory: $(Build.SourcesDirectory)
  displayName: Define Build Version

- task: NodeTool@0
  displayName: 'Use Node 14.x'
  inputs:
    versionSpec: 14.x

- script: 'node ./common/scripts/set-registry-artifacts.js'
  displayName: 'Point /common/config/rush/.npmrc to artifacts url'

- task: npmAuthenticate@0
  displayName: 'npm Authenticate common/config/rush/.npmrc'
  inputs:
    workingFile: common/config/rush/.npmrc
    
- script: 'npm install --global @microsoft/rush@5.33.0'
  displayName: 'npm install --global @microsoft/rush'

- script: 'rush update'
  displayName: 'rush update'

- script: 'rush build -p 2'
  displayName: 'rush build -p 2'

- script: 'rush test'
  displayName: 'rush test'

- script: 'node ./common/scripts/version-and-pack.js --version $(buildVersion)'
  displayName: 'Version and Pack'

- task: CopyFiles@2
  displayName: 'Copy packages to: $(Build.ArtifactStagingDirectory)/drop'
  inputs:
    SourceFolder: ./.output
    Contents: '**/*.tgz'
    TargetFolder: '$(Build.ArtifactStagingDirectory)/drop'
    flattenFolders: true
    
- task: AzureArtifacts.manifest-generator-task.manifest-generator-task.ManifestGeneratorTask@0
  displayName: 'generate software bill of materials'
  inputs:
    BuildDropPath: '$(Build.ArtifactStagingDirectory)/drop'
    PackageName: 'Microsoft Bot Framework CLI'
    PackageVersion: $(buildVersion)

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: drop'
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)/drop'
    ArtifactName: drop

- powershell: 'Get-ChildItem .. -ErrorAction Continue -Recurse -Force | Where {$_.FullName -notlike "*node_modules*"}'
  displayName: 'Dir workspace except node_modules'
  continueOnError: true
  condition: succeededOrFailed()
    

