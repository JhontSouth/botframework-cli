#
# Publish of Bot Deployment Task in the Marketplace
#

# "name" here defines the build number format. Build number is accessed via $(Build.BuildNumber)
name: $(Build.BuildId)

pool:
  name: Hosted Windows 2019 with VS2019

jobs:
  - job: BotDeploymentTask_Publish
    variables:
      buildVersion: '4.8.0-preview.$(Build.BuildId)'
      _version: ${{coalesce(variables.version, variables.buildVersion)}}
      publisherId: 'Microsoft'
      extensionId: 'bot-deployment'
      extensionName: 'Bot Deployment'
      version: '4.8.0.$(Build.BuildId)'
      # TelemetryInstrumentationKey: 'Define this in Azure'
      # MarketplaceConnection: 'Define this in Azure'

    steps:
    - task: colinsalmcorner.colinsalmcorner-buildtasks.tag-build-task.tagBuildOrRelease@0
      displayName: 'Tag Build with version number'
      inputs:
        tags: 'Version=$(_version)'
      continueOnError: true
      condition: and(succeeded(), eq(variables['System.PullRequest.IsFork'], 'False'))

    - task: NodeTool@0
      displayName: 'Use Node 12.x'
      inputs:
        versionSpec: 12.x

    - task: Npm@1
      displayName: 'Install rush'
      inputs:
        command: custom
        verbose: false
        customCommand: 'install --global @microsoft/rush'

    - script: 'rush update'
      displayName: 'rush update'

    - script: 'rush build -p 2 -t @microsoft/bot-deployment-task'
      displayName: 'rush build'

    - powershell: |
        #Set values in .env file.
        
        $file = "$(Build.SourcesDirectory)/packages/botDeploymentTask/botDeployment/.env";
        echo "##vso[task.setvariable variable=KEY;]$(TelemetryInstrumentationKey)"
        $content = Get-Content -Raw $file | ConvertFrom-StringData;
        
        $content.InstrumentationKey=$KEY;
        
        Clear-Content $file;
        
        foreach ($key in $content.keys) { Add-Content $file "$key=$($content.$key)" }
      displayName: 'Set Environment Keys'

    - task: ms-devlabs.vsts-developer-tools-build-tasks.tfx-installer-build-task.TfxInstaller@2
      displayName: 'Install tfx-cli: v0.7.x'
      inputs:
        version: v0.7.x

    - task: ms-devlabs.vsts-developer-tools-build-tasks.package-extension-build-task.PackageAzureDevOpsExtension@2
      displayName: 'Package Extension: packages/botDeploymentTask'
      inputs:
        rootFolder: packages/botDeploymentTask
        outputPath: '$(Build.ArtifactStagingDirectory)'
        publisherId: '$(publisherId)'
        extensionName: '$(extensionName)'
        extensionVersion: '$(version)'
        extensionVisibility: private
        extensionPricing: free

    - task: ms-devlabs.vsts-developer-tools-build-tasks.publish-extension-build-task.PublishAzureDevOpsExtension@2
      displayName: 'Publish Extension'
      inputs:
        connectedServiceName: $(MarketplaceConnection)
        fileType: vsix
        vsixFile: '$(Build.ArtifactStagingDirectory)/$(publisherId).$(extensionId)-$(version).vsix'
        publisherId: '$(publisherId)'
        updateTasksVersion: false
        extensionVisibility: public
        extensionPricing: free

